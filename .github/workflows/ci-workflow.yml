# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  # Install dependencies, run unit test, build the application and upload his artifact
  install-test-build:
    name: Install deps and test
    runs-on: ubuntu-latest

    # Used to test install, test, build on each Node.js 12.x and 14.x versions
    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js v${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

        # Cache "node_modules" to make next pipelines faster
      - name: Cache "node_modules"
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

        # Install all dependencies without change package-lock.json (ref: https://docs.npmjs.com/cli/ci.html)
      - name: Install dependencies
        run: npm ci

        # Run all tests using test framework
      - name: Run unit test using Jest
        run: npm run test:unit

        # Build the application in production mode to get minifie source code
      - name: Build application (which will located in /dist directory)
        run: npm run build

        # Upload bundle application as artifact, used later by Cypress
      - name: Upload build application artifact (located in /dist directory)
        uses: actions/upload-artifact@v2
        with:
          name: bundle-application
          path: dist

  # E2E testing using Cypress, than upload result videos as artifact
  cypress-run:
    name: E2E Cypress test
    runs-on: ubuntu-latest

    needs: install-test-build

    # Used to test install, test, build on each Node.js 12.x and 14.x versions
    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - name: Setup Node.js v${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v2

      - name: Download build application artifact (located in /dist directory)
        uses: actions/download-artifact@v2
        with:
          name: bundle-application
          path: dist

        # Developer feature to understand how GitHub Actions works
      - name: Display structure of downloaded files
        run: |
          cd dist
          ls -R

        # Developer feature to understand how GitHub Actions works
      - name: Display structure of working directory
        run: ls -la

      - name: Install last Cypress version
        run: npm install cypress --save-dev

        # Docs https://github.com/cypress-io/github-action
      - name: Run Cypress and record
        uses: cypress-io/github-action@v2
        with:
          install: false
          record: true
          parallel: true
          browser: chrome
          tag: chrome
          group: Tests on Google Chrome with Node.js v${{ matrix.node-version }}
          start: npm start
          wait-on: "http://localhost:8080/"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      # NOTE: screenshots will be generated only if E2E test failed
      # thus we store screenshots only on failures
      # Alternative: create and commit an empty cypress/screenshots folder
      # to always have something to upload
      - name: Upload Cypress screenshots (if E2E Cypress test failed)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: tests/e2e/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos
          path: tests/e2e/videos/

  # Build Docker image, using Dockerfile, .dockerignore and nginx.conf, than push on anthonypillot/website registry
  docker-build-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest

    needs: cypress-run

    steps:
      - uses: actions/checkout@v2
      - name: Build and push Docker image to registry
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: anthonypillot/website
          tags: latest
